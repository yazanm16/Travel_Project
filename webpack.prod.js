// Import required plugins and modules
const { CleanWebpackPlugin } = require("clean-webpack-plugin"); // Plugin to clean up the output directory before each build
const path = require("path"); // Module for working with file and directory paths
const webpack = require("webpack"); // Webpack core module
const HtmlWebPackPlugin = require("html-webpack-plugin"); // Plugin to generate HTML files
const WorkboxPlugin = require("workbox-webpack-plugin"); // Plugin to generate a service worker for PWA

module.exports = {
  // Entry point for the application
  entry: "./src/client/index.js",
 devtool: 'source-map',
  // Mode of the build process
  mode: "production", // Use "development" for debugging and "production" for optimized builds

  // Output configuration
  output: {
    libraryTarget: "var", // Define the output format of the library
    library: "Client", // Name of the global variable representing the library
  },

  // Module rules for processing different types of files
  module: {
    rules: [
      {
        test: /\.js$/, // RegExp to match JavaScript files
        exclude: /node_modules/, // Exclude node_modules directory
        loader: "babel-loader", // Loader to transpile JavaScript files using Babel
      },
      {
        test: /\.scss$/, // RegExp to match SCSS files
        use: ["style-loader", "css-loader", "sass-loader"], // Loaders to handle SCSS files
      },
    ],
  },

  // Plugins to extend Webpack's functionality
  plugins: [
    new HtmlWebPackPlugin({
      template: "./src/client/views/index.html", // Template HTML file
      filename: "./index.html", // Output HTML file name
      title: "Progressive Web Application", // Title of the generated HTML file
    }),

    new WorkboxPlugin.GenerateSW({
      clientsClaim: true, // Automatically claim clients when the service worker is activated
      skipWaiting: true, // Skip the waiting phase and activate the new service worker immediately
    }),

    new CleanWebpackPlugin({
      dry: true, // Log the files that would be removed but don't actually remove them (useful for testing)
      verbose: true, // Log the details of what is being cleaned
      cleanStaleWebpackAssets: true, // Remove assets that are no longer referenced in the build
      protectWebpackAssets: false, // Allow removal of assets generated by Webpack
    }),
  ],
};